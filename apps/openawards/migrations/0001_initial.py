# Generated by Django 2.1.2 on 2018-11-01 09:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import openawards.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_confirmed', models.BooleanField(default=False)),
                ('avatar', models.ImageField(null=True, upload_to=openawards.models.upload_path)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a video title', max_length=200, unique=True)),
                ('slug', models.CharField(max_length=100, unique=True)),
                ('created', models.DateField(blank=True, null=True)),
                ('image', models.ImageField(null=True, upload_to=openawards.models.upload_path)),
                ('active', models.BooleanField(default=False)),
                ('description', models.TextField()),
                ('starts_on', models.DateTimeField(null=True)),
                ('ends_on', models.DateTimeField(null=True)),
                ('max_winners_position', models.IntegerField(default=3)),
            ],
        ),
        migrations.CreateModel(
            name='CreditAcquisition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('source', models.CharField(choices=[('C', 'Creation'), ('A', 'Admin'), ('P', 'PayPal'), ('D', 'Dev')], default='C', max_length=1)),
                ('acquired_on', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Find it in <a target='_blank' href='http://creativecommons.org'>creativecommons.org</a>", max_length=200, unique=True)),
                ('url', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voted_on', models.DateTimeField(null=True)),
                ('award', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='openawards.Award')),
                ('fan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('cover', models.ImageField(blank=True, null=True, upload_to=openawards.models.upload_path)),
                ('created', models.DateTimeField(blank=True, null=True)),
                ('url', models.CharField(max_length=200, unique=True)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='works', to=settings.AUTH_USER_MODEL)),
                ('license', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='openawards.License')),
            ],
        ),
        migrations.CreateModel(
            name='AdminCreditAcquisition',
            fields=[
                ('creditacquisition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='openawards.CreditAcquisition')),
                ('giver', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('openawards.creditacquisition',),
        ),
        migrations.CreateModel(
            name='PayPalCreditAcquisition',
            fields=[
                ('creditacquisition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='openawards.CreditAcquisition')),
                ('reference', models.CharField(max_length=200, unique=True)),
            ],
            bases=('openawards.creditacquisition',),
        ),
        migrations.AddField(
            model_name='vote',
            name='work',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='openawards.Work'),
        ),
        migrations.AddField(
            model_name='creditacquisition',
            name='acquired_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='credits', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='award',
            name='winners',
            field=models.ManyToManyField(blank=True, related_name='won_at', to='openawards.Work'),
        ),
        migrations.AddField(
            model_name='award',
            name='works',
            field=models.ManyToManyField(blank=True, related_name='awards', to='openawards.Work'),
        ),
    ]
